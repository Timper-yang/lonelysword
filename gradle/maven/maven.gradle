apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'


def bintrayUser = bintray_user
def bintrayApikey = bintray_apikey

// 定义参数
def gitUrl = 'https://github.com/Timper-yang/lonelysword.git'   // Git仓库的url
def sitUrl = 'https://github.com/Timper-yang/lonelysword' //网站url
def groupIdDefined = "com.timper"

def publicationVersion = project.ARTIFACT_VERSION


static def getDependencyNode(scope, groupId, artifactId, version) {
    Node node = new Node(null, 'dependency')
    node.appendNode('groupId', groupId)
    node.appendNode('artifactId', artifactId)
    node.appendNode('version', version)
    node.appendNode('scope', scope)
    return node
}

def gitShortRev() {
    def gitCommit = ""
    def proc = "git rev-parse --short HEAD".execute()
    proc.in.eachLine { line -> gitCommit = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    return gitCommit
}

def getPublishReleaseUrl(String publishMode) {
    return "release".equals(publishMode) ? "http://nexus.nevint.com/repository/maven-releases" : "http://nexus.nevint.com/repository/maven-snapshots"
}


// bintray平台信息配置
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    user = bintrayUser // local.properties里设置
    key = bintrayApikey // local.properties里设置
    publications = ['lonelysword'] // 'lonelysword'与下面的publishing闭包里的名称对应
    publish = true // 上传后立即发布到Bintray平台
    pkg {
        userOrg = "timper"
        repo = "maven"  // 必填。bintray平台仓库名，必须已经创建过。
        licenses = ["Apache-2.0"] // 首次创建package则必须，否则选填。
        vcsUrl = gitUrl // 首次创建package则必须，否则选填。
        websiteUrl = sitUrl
    }
}

def setScm(scm) {
    scm.appendNode('connection', "https://github.com/Timper-yang/lonelysword.git")

    def commit
    if ("${System.env.ORANGE}".equalsIgnoreCase("true")) {
        commit = "${System.env.ORANGE_COMMIT}"
    } else {
        commit = gitShortRev()
    }
    scm.appendNode('url', "https://github.com/Timper-yang/lonelysword.git/commit/$commit")
}

// 构件文件和POM信息配置
publishing {
    publications {
        lonelysword(MavenPublication) {
            artifact("projects/lonelysword/build/outputs/aar/lonelysword-release.aar")
//            artifact sourcesJar
//            artifact javadocJar
            groupId groupIdDefined
            artifactId "lonelysword"
            version publicationVersion

            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')

                dependencies.append(getDependencyNode('compile', 'com.timper', 'lonelysword-annotations', '0.5.5'))
                dependencies.append(getDependencyNode('compile', 'androidx.core', 'core', project.versions.androidx))
                dependencies.append(getDependencyNode('compile', 'androidx.legacy', 'legacy-support-v4', project.versions.androidx))
                dependencies.append(getDependencyNode('compile', 'androidx.appcompat', 'appcompat', project.versions.androidx))
                dependencies.append(getDependencyNode('compile', 'com.google.dagger', 'dagger-android', project.versions.dagger))
                dependencies.append(getDependencyNode('compile', 'com.google.dagger', 'dagger-android-support', project.versions.dagger))
                dependencies.append(getDependencyNode('compile', 'androidx.lifecycle', 'lifecycle-extensions', '2.0.0'))
                dependencies.append(getDependencyNode('compile', 'androidx.lifecycle', 'lifecycle-common-java8', '2.0.0'))

                def scm = root.appendNode('scm')
                setScm(scm)
            }
        }
    }
}

// 生成sourceJar和javaDocJar构件
//task sourcesJar(type: Jar) {
//    from android.sourceSets.main.java.srcDirs
//    classifier = 'sources'
//}
//
//task javadoc(type: Javadoc) {
//    failOnError false
//    source = android.sourceSets.main.java.sourceFiles
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    classpath += configurations.compile
//}
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

//artifacts {
//    archives sourcesJar
//    archives javadocJar
//}


//task buildSdk() {
//    dependsOn gradle.includedBuild('lonelysword-parent').task(':lonelysword:assembleRelease')
//    dependsOn gradle.includedBuild('lonelysword-parent').task(':lonelysword-android-compiler:assemble')
//    dependsOn gradle.includedBuild('lonelysword-parent').task(':lonelysword-annotations:assemble')
//    dependsOn gradle.includedBuild('lonelysword-parent').task(':lonelysword-common:assemble')
//    dependsOn gradle.includedBuild('lonelysword-parent').task(':lonelysword-plugin:assemble')
//    dependsOn gradle.includedBuild('lonelysword-parent').task(':lonelysword-support:assembleRelease')
//    dependsOn gradle.includedBuild('lonelysword-parent').task(':lonelysword-usecase:assemble')
//    dependsOn gradle.includedBuild('lonelysword-parent').task(':lonelysword-usecase-compiler:assemble')
//}
//
//
//def setGeneratePomFileAndDepends(publicationName) {
//    model {
//        tasks."generatePomFileFor${publicationName.capitalize()}Publication" {
//            destination = file("$buildDir/pom/$publicationName-pom.xml")
//            dependsOn(buildSdk)
//        }
//    }
//}
//
//setGeneratePomFileAndDepends('utils')
//setGeneratePomFileAndDepends('updownload')
//setGeneratePomFileAndDepends('common')
//setGeneratePomFileAndDepends('calendar')
//setGeneratePomFileAndDepends('activity')
//setGeneratePomFileAndDepends('coupon')
//setGeneratePomFileAndDepends('file')
//setGeneratePomFileAndDepends('im')
//setGeneratePomFileAndDepends('login')
//setGeneratePomFileAndDepends('nfc')
//setGeneratePomFileAndDepends('plugin')
//setGeneratePomFileAndDepends('push')
//setGeneratePomFileAndDepends('upgrade')
//setGeneratePomFileAndDepends('userview')
//setGeneratePomFileAndDepends('daily')
//setGeneratePomFileAndDepends('workflow')
//setGeneratePomFileAndDepends('maplib')
//setGeneratePomFileAndDepends('websocket')
//setGeneratePomFileAndDepends('watermark')