package com.timper.lonelysword.compiler.usecase;

import com.google.auto.service.AutoService;
import com.google.common.collect.ImmutableSet;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.sun.tools.javac.code.Symbol;
import com.sun.tools.javac.code.Type;
import com.timper.lonelysword.annotations.apt.UseCase;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.annotation.Annotation;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.util.Elements;
import javax.lang.model.util.Types;
import javax.tools.Diagnostic;

import static javax.lang.model.element.ElementKind.INTERFACE;
import static javax.lang.model.element.ElementKind.METHOD;
import static javax.lang.model.element.Modifier.PRIVATE;
import static javax.lang.model.element.Modifier.STATIC;

/**
 * User: tangpeng.yang
 * Date: 17/05/2018
 * Description:
 * FIXME
 */
@AutoService(Processor.class) @SupportedSourceVersion(SourceVersion.RELEASE_7) public class UseCaseProcessor
    extends AbstractProcessor {

  private static final String OPTION_SDK_INT = "lonelysword.minSdk";
  private static final String OPTION_DEBUGGABLE = "lonelysword.debuggable";

  static final ClassName OBJECT = ClassName.get("java.lang", "Object");

  private Types typeUtils;
  private Filer filer;
  private Elements elements;

  private int sdk = 1;
  private boolean debuggable = true;

  @Override public synchronized void init(ProcessingEnvironment env) {
    super.init(env);
    elements = processingEnv.getElementUtils();
    typeUtils = env.getTypeUtils();
    filer = env.getFiler();
  }

  @Override public Set<String> getSupportedOptions() {
    return ImmutableSet.of(OPTION_SDK_INT, OPTION_DEBUGGABLE);
  }

  @Override public Set<String> getSupportedAnnotationTypes() {
    Set<String> types = new LinkedHashSet<>();
    for (Class<? extends Annotation> annotation : getSupportedAnnotations()) {
      types.add(annotation.getCanonicalName());
    }
    return types;
  }

  private Set<Class<? extends Annotation>> getSupportedAnnotations() {
    Set<Class<? extends Annotation>> annotations = new LinkedHashSet<>();
    annotations.add(UseCase.class);
    return annotations;
  }

  @Override public boolean process(Set<? extends TypeElement> set, RoundEnvironment env) {
    Map<TypeElement, UseCaseSet> bindingMap = parseTargets(env);

    for (Map.Entry<TypeElement, UseCaseSet> entry : bindingMap.entrySet()) {
      TypeElement typeElement = entry.getKey();
      UseCaseSet binding = entry.getValue();
      try {
        binding.brewJava(filer, sdk, debuggable);
      } catch (IOException e) {
        error(typeElement, "Unable to write binding for type %s: %s", typeElement, e.getMessage());
      }
    }
    return true;
  }

  private Map<TypeElement, UseCaseSet> parseTargets(RoundEnvironment env) {
    Map<TypeElement, UseCaseSet.Builder> builderMap = new LinkedHashMap<>();
    Set<TypeElement> erasedTargetNames = new LinkedHashSet<>();

    // Process each @UseCase element.
    for (Element element : env.getElementsAnnotatedWith(UseCase.class)) {
      // we don't SuperficialValidation.validateElement(element)
      // so that an unresolved View type can be generated by later processing rounds
      try {
        parseUseCase(element, builderMap, erasedTargetNames);
      } catch (Exception e) {
        logParsingError(element, UseCase.class, e);
      }
    }

    // Associate superclass binders with their subclass binders. This is a queue-based tree walk
    // which starts at the roots (superclasses) and walks to the leafs (subclasses).
    Deque<Map.Entry<TypeElement, UseCaseSet.Builder>> entries = new ArrayDeque<>(builderMap.entrySet());
    Map<TypeElement, UseCaseSet> bindingMap = new LinkedHashMap<>();
    while (!entries.isEmpty()) {
      Map.Entry<TypeElement, UseCaseSet.Builder> entry = entries.removeFirst();

      TypeElement type = entry.getKey();
      UseCaseSet.Builder builder = entry.getValue();
      bindingMap.put(type, builder.build());
    }
    return bindingMap;
  }

  private void parseUseCase(Element element, Map<TypeElement, UseCaseSet.Builder> builderMap,
      Set<TypeElement> erasedTargetNames) {
    // This should be guarded by the annotation's @Target but it's worth a check for safe casting.
    if (!(element instanceof ExecutableElement) || element.getKind() != METHOD) {
      throw new IllegalStateException(String.format("@%s annotation must be on a method.", UseCase.class.getSimpleName()));
    }

    ExecutableElement executableElement = (ExecutableElement) element;
    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();

    // Verify that the method and its containing class are accessible via generated code.
    boolean hasError = isInaccessibleViaGeneratedCode(UseCase.class, "methods", element);
    hasError |= isBindingInWrongPackage(UseCase.class, element);

    String name = executableElement.getSimpleName().toString();

    // Verify that the method no parameters.
    List<? extends VariableElement> methodParameters = executableElement.getParameters();
    if (methodParameters != null && methodParameters.size() > 1) {
      error(element, "@%s methods have more than one parameters", UseCase.class);
      hasError = true;
    }

    // Verify method return type matches the beforViews.
    TypeMirror returnType = executableElement.getReturnType();
    TypeName returnClassName = null;
    if (!(returnType instanceof Type.ClassType)) {
      error(element, "@%s methods return type is not a ClassType", returnType.toString());
      hasError = true;
    } else {
      Type.ClassType classType = ((Type.ClassType) returnType);
      if (!((Symbol.ClassSymbol) classType.tsym).fullname.toString().equals("io.reactivex.Observable")) {
        error(element, "@%s methods must have a '%s' return type. (%s.%s)", UseCase.class, "Observable",
            enclosingElement.getQualifiedName(), element.getSimpleName());
        hasError = true;
      }
      com.sun.tools.javac.util.List<Type> types = classType.allparams();
      if (types != null && types.size() == 1) {
        returnClassName = getTypeName(types.get(0));
      } else if (types != null && types.size() > 1) {
        error(element, "@%s return type Observable do not have more than one parameter type", UseCase.class, "Observable");
        hasError = true;
      }
    }

    UseCaseBinding.Builder builder = new UseCaseBinding.Builder(name);
    UseCaseSet.Builder useCase = getOrCreateBindingBuilder(builderMap, enclosingElement);
    if (!useCase.addUseCaseBinding(builder)) {
      error(element, "@%s the same useCase name.", UseCase.class);
      hasError = true;
    }

    if (hasError) {
      return;
    }

    if (methodParameters != null && methodParameters.size() > 0) {
      TypeMirror typeMirror = methodParameters.get(0).asType();
      TypeName parameter = getTypeName((Type.ClassType) typeMirror);
      builder.addParameter(parameter);
    } else {
    }
    builder.addReturnClass(returnClassName);

    builderMap.put(enclosingElement, useCase);
    erasedTargetNames.add(enclosingElement);
  }

  private TypeName getTypeName(Type type) {
    TypeName[] typeNames = new TypeName[type.allparams().size()];
    if (type.allparams().size() > 0) {
      for (int i = 0; i < type.allparams().size(); i++) {
        Type.ClassType classType = (Type.ClassType) type.allparams().get(i);
        if (classType.allparams().size() > 0) {
          typeNames[i] = getTypeName(classType);
        } else {
          typeNames[i] = ClassName.get((Symbol.ClassSymbol) classType.tsym);
        }
      }
    }
    if (typeNames.length == 0) {
      return ClassName.get((Symbol.ClassSymbol) type.tsym);
    } else {
      return ParameterizedTypeName.get(ClassName.get((Symbol.ClassSymbol) type.tsym), typeNames);
    }
  }

  private UseCaseSet.Builder getOrCreateBindingBuilder(Map<TypeElement, UseCaseSet.Builder> builderMap,
      TypeElement enclosingElement) {
    UseCaseSet.Builder builder = builderMap.get(enclosingElement);
    if (builder == null) {
      builder = UseCaseSet.newBuilder(enclosingElement);
      builderMap.put(enclosingElement, builder);
    }
    return builder;
  }

  /**
   * wrong method varify
   */
  private boolean isInaccessibleViaGeneratedCode(Class<? extends Annotation> annotationClass, String targetThing,
      Element element) {
    boolean hasError = false;
    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();

    // Verify field or method modifiers.
    Set<Modifier> modifiers = element.getModifiers();
    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {
      error(element, "@%s %s must not be private or static. (%s.%s)", annotationClass.getSimpleName(), targetThing,
          enclosingElement.getQualifiedName(), element.getSimpleName());
      hasError = true;
    }

    // Verify containing type.
    if (enclosingElement.getKind() != INTERFACE) {
      error(enclosingElement, "@%s %s may only be contained in classes. (%s.%s)", annotationClass.getSimpleName(), targetThing,
          enclosingElement.getQualifiedName(), element.getSimpleName());
      hasError = true;
    }

    // Verify containing class visibility is not private.
    if (enclosingElement.getModifiers().contains(PRIVATE)) {
      error(enclosingElement, "@%s %s may not be contained in private classes. (%s.%s)", annotationClass.getSimpleName(),
          targetThing, enclosingElement.getQualifiedName(), element.getSimpleName());
      hasError = true;
    }

    return hasError;
  }

  /**
   * wrong package varify
   */
  private boolean isBindingInWrongPackage(Class<? extends Annotation> annotationClass, Element element) {
    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
    String qualifiedName = enclosingElement.getQualifiedName().toString();

    if (qualifiedName.startsWith("android.")) {
      error(element, "@%s-annotated class incorrectly in Android framework package. (%s)", annotationClass.getSimpleName(),
          qualifiedName);
      return true;
    }
    if (qualifiedName.startsWith("java.")) {
      error(element, "@%s-annotated class incorrectly in Java framework package. (%s)", annotationClass.getSimpleName(),
          qualifiedName);
      return true;
    }

    return false;
  }

  private void error(Element element, String message, Object... args) {
    printMessage(Diagnostic.Kind.ERROR, element, message, args);
  }

  private void note(Element element, String message, Object... args) {
    printMessage(Diagnostic.Kind.NOTE, element, message, args);
  }

  private void printMessage(Diagnostic.Kind kind, Element element, String message, Object[] args) {
    if (args.length > 0) {
      message = String.format(message, args);
    }

    processingEnv.getMessager().printMessage(kind, message, element);
  }

  private void logParsingError(Element element, Class<? extends Annotation> annotation, Exception e) {
    StringWriter stackTrace = new StringWriter();
    e.printStackTrace(new PrintWriter(stackTrace));
    error(element, "Unable to parse @%s binding.\n\n%s", annotation.getSimpleName(), stackTrace);
  }
}
